{"ast":null,"code":"import { setAlert } from './alert-action';\nimport api from '../utils/api';\nimport { GET_COOLER, COOLER_ERROR, COOLER_GET_QUANTITY, COOLER_ADD_PRODUCT, COOLER_REMOVE_PRODUCT, COOLER_CHECKOUT, COOLER_REVIEW, COOLER_CHECKOUT_AS_GUEST, COOLER_CHECKOUT_AS_MEMBER, COOLER_PLACE_ORDER, LOAD_CURRENT_ORDER, COOLER_REMOVE_ALL, COOLER_UPDATE_QUANTITY } from './types';\nexport const getCooler = () => async dispatch => {\n  try {\n    const res = await api.get('/profile/cooler');\n    dispatch({\n      type: GET_COOLER,\n      payload: res.data.profileCooler\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: COOLER_ERROR\n    });\n    setAlert('A problem has occurred.');\n  }\n};\nexport const coolerGetQuantity = () => dispatch => {\n  dispatch({\n    type: COOLER_GET_QUANTITY\n  });\n};\nexport const coolerAddProduct = (beer, quantity, isAuthenticated) => async dispatch => {\n  // Add a quantity field to item\n  const product = { ...beer,\n    quantity\n  };\n  const productData = {\n    cooler: [product]\n  }; // If user is not logged in, add item to frontend cooler only\n\n  if (!isAuthenticated) {\n    dispatch({\n      type: COOLER_ADD_PRODUCT,\n      payload: product\n    });\n    dispatch(setAlert(`${quantity}x ${beer.name} added to cooler.`));\n    return;\n  } // If user is logged in, save item in db\n\n\n  try {\n    await api.post('/profile/cooler', productData);\n    dispatch({\n      type: COOLER_ADD_PRODUCT,\n      payload: product\n    });\n    dispatch(setAlert(`${quantity}x ${beer.name} added to cooler.`));\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: COOLER_ERROR\n    });\n    setAlert('A problem has occurred.');\n  }\n};\nexport const coolerRemoveProduct = (id, name) => async dispatch => {\n  try {\n    await api.delete(`/profile/cooler/${id}`);\n    dispatch(setAlert(`${name} has been removed.`));\n    dispatch({\n      type: COOLER_REMOVE_PRODUCT,\n      payload: id\n    });\n    dispatch(coolerGetQuantity());\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: COOLER_ERROR\n    });\n    setAlert('A problem has occurred.');\n  }\n};\nexport const coolerRemoveAll = guest => async dispatch => {\n  if (guest) {\n    return dispatch({\n      type: COOLER_REMOVE_ALL\n    });\n  }\n\n  try {\n    await api.delete('/profile/cooler');\n    dispatch({\n      type: COOLER_REMOVE_ALL\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: COOLER_ERROR\n    });\n    dispatch(setAlert('A problem has occurred.'));\n  }\n};\nexport const coolerCheckout = () => dispatch => {\n  dispatch({\n    type: COOLER_CHECKOUT\n  });\n};\nexport const coolerReview = () => dispatch => {\n  dispatch({\n    type: COOLER_REVIEW\n  });\n};\nexport const coolerCheckoutAsGuest = () => dispatch => {\n  dispatch({\n    type: COOLER_CHECKOUT_AS_GUEST\n  });\n};\nexport const coolerCheckoutAsMember = () => dispatch => {\n  dispatch({\n    type: COOLER_CHECKOUT_AS_MEMBER\n  });\n};\nexport const coolerPlaceOrder = (order, checkoutAsGuest) => async dispatch => {\n  try {\n    const res = await api.post(checkoutAsGuest ? '/orders/guest-new' : '/orders/new', order);\n    dispatch({\n      type: COOLER_PLACE_ORDER\n    });\n    dispatch({\n      type: LOAD_CURRENT_ORDER,\n      payload: res.data.order\n    });\n    return res.data;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const clearCoolerLogout = () => dispatch => {\n  dispatch({\n    type: COOLER_REMOVE_ALL\n  });\n};\nexport const coolerUpdateQuantity = (id, quantity) => dispatch => {\n  dispatch({\n    type: COOLER_UPDATE_QUANTITY,\n    payload: {\n      id,\n      quantity\n    }\n  });\n  dispatch(coolerGetQuantity());\n};","map":{"version":3,"sources":["/Users/andy/Projects/beer-cooler-merged/client/src/actions/cooler-action.js"],"names":["setAlert","api","GET_COOLER","COOLER_ERROR","COOLER_GET_QUANTITY","COOLER_ADD_PRODUCT","COOLER_REMOVE_PRODUCT","COOLER_CHECKOUT","COOLER_REVIEW","COOLER_CHECKOUT_AS_GUEST","COOLER_CHECKOUT_AS_MEMBER","COOLER_PLACE_ORDER","LOAD_CURRENT_ORDER","COOLER_REMOVE_ALL","COOLER_UPDATE_QUANTITY","getCooler","dispatch","res","get","type","payload","data","profileCooler","error","console","log","coolerGetQuantity","coolerAddProduct","beer","quantity","isAuthenticated","product","productData","cooler","name","post","coolerRemoveProduct","id","delete","coolerRemoveAll","guest","coolerCheckout","coolerReview","coolerCheckoutAsGuest","coolerCheckoutAsMember","coolerPlaceOrder","order","checkoutAsGuest","message","clearCoolerLogout","coolerUpdateQuantity"],"mappings":"AAAA,SAASA,QAAT,QAAyB,gBAAzB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,SACEC,UADF,EAEEC,YAFF,EAGEC,mBAHF,EAIEC,kBAJF,EAKEC,qBALF,EAMEC,eANF,EAOEC,aAPF,EAQEC,wBARF,EASEC,yBATF,EAUEC,kBAVF,EAWEC,kBAXF,EAYEC,iBAZF,EAaEC,sBAbF,QAcO,SAdP;AAgBA,OAAO,MAAMC,SAAS,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACjD,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMhB,GAAG,CAACiB,GAAJ,CAAQ,iBAAR,CAAlB;AACAF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEjB,UADC;AAEPkB,MAAAA,OAAO,EAAEH,GAAG,CAACI,IAAJ,CAASC;AAFX,KAAD,CAAR;AAID,GAND,CAME,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAP,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEhB;AADC,KAAD,CAAR;AAGAH,IAAAA,QAAQ,CAAC,yBAAD,CAAR;AACD;AACF,CAdM;AAgBP,OAAO,MAAM0B,iBAAiB,GAAG,MAAOV,QAAD,IAAc;AACnDA,EAAAA,QAAQ,CAAC;AACPG,IAAAA,IAAI,EAAEf;AADC,GAAD,CAAR;AAGD,CAJM;AAMP,OAAO,MAAMuB,gBAAgB,GAAG,CAACC,IAAD,EAAOC,QAAP,EAAiBC,eAAjB,KAAqC,MACnEd,QADmE,IAEhE;AACH;AACA,QAAMe,OAAO,GAAG,EAAE,GAAGH,IAAL;AAAWC,IAAAA;AAAX,GAAhB;AACA,QAAMG,WAAW,GAAG;AAClBC,IAAAA,MAAM,EAAE,CAACF,OAAD;AADU,GAApB,CAHG,CAOH;;AACA,MAAI,CAACD,eAAL,EAAsB;AACpBd,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEd,kBADC;AAEPe,MAAAA,OAAO,EAAEW;AAFF,KAAD,CAAR;AAIAf,IAAAA,QAAQ,CAAChB,QAAQ,CAAE,GAAE6B,QAAS,KAAID,IAAI,CAACM,IAAK,mBAA3B,CAAT,CAAR;AACA;AACD,GAfE,CAiBH;;;AACA,MAAI;AACF,UAAMjC,GAAG,CAACkC,IAAJ,CAAS,iBAAT,EAA4BH,WAA5B,CAAN;AACAhB,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEd,kBADC;AAEPe,MAAAA,OAAO,EAAEW;AAFF,KAAD,CAAR;AAIAf,IAAAA,QAAQ,CAAChB,QAAQ,CAAE,GAAE6B,QAAS,KAAID,IAAI,CAACM,IAAK,mBAA3B,CAAT,CAAR;AACD,GAPD,CAOE,OAAOX,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAP,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEhB;AADC,KAAD,CAAR;AAGAH,IAAAA,QAAQ,CAAC,yBAAD,CAAR;AACD;AACF,CAlCM;AAoCP,OAAO,MAAMoC,mBAAmB,GAAG,CAACC,EAAD,EAAKH,IAAL,KAAc,MAAOlB,QAAP,IAAoB;AACnE,MAAI;AACF,UAAMf,GAAG,CAACqC,MAAJ,CAAY,mBAAkBD,EAAG,EAAjC,CAAN;AACArB,IAAAA,QAAQ,CAAChB,QAAQ,CAAE,GAAEkC,IAAK,oBAAT,CAAT,CAAR;AACAlB,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEb,qBADC;AAEPc,MAAAA,OAAO,EAAEiB;AAFF,KAAD,CAAR;AAIArB,IAAAA,QAAQ,CAACU,iBAAiB,EAAlB,CAAR;AACD,GARD,CAQE,OAAOH,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAP,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEhB;AADC,KAAD,CAAR;AAGAH,IAAAA,QAAQ,CAAC,yBAAD,CAAR;AACD;AACF,CAhBM;AAkBP,OAAO,MAAMuC,eAAe,GAAIC,KAAD,IAAW,MAAOxB,QAAP,IAAoB;AAC5D,MAAIwB,KAAJ,EAAW;AACT,WAAOxB,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEN;AAAR,KAAD,CAAf;AACD;;AACD,MAAI;AACF,UAAMZ,GAAG,CAACqC,MAAJ,CAAW,iBAAX,CAAN;AACAtB,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEN;AADC,KAAD,CAAR;AAGD,GALD,CAKE,OAAOU,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAP,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEhB;AADC,KAAD,CAAR;AAGAa,IAAAA,QAAQ,CAAChB,QAAQ,CAAC,yBAAD,CAAT,CAAR;AACD;AACF,CAhBM;AAkBP,OAAO,MAAMyC,cAAc,GAAG,MAAOzB,QAAD,IAAc;AAChDA,EAAAA,QAAQ,CAAC;AACPG,IAAAA,IAAI,EAAEZ;AADC,GAAD,CAAR;AAGD,CAJM;AAMP,OAAO,MAAMmC,YAAY,GAAG,MAAO1B,QAAD,IAAc;AAC9CA,EAAAA,QAAQ,CAAC;AACPG,IAAAA,IAAI,EAAEX;AADC,GAAD,CAAR;AAGD,CAJM;AAMP,OAAO,MAAMmC,qBAAqB,GAAG,MAAO3B,QAAD,IAAc;AACvDA,EAAAA,QAAQ,CAAC;AACPG,IAAAA,IAAI,EAAEV;AADC,GAAD,CAAR;AAGD,CAJM;AAMP,OAAO,MAAMmC,sBAAsB,GAAG,MAAO5B,QAAD,IAAc;AACxDA,EAAAA,QAAQ,CAAC;AACPG,IAAAA,IAAI,EAAET;AADC,GAAD,CAAR;AAGD,CAJM;AAMP,OAAO,MAAMmC,gBAAgB,GAAG,CAACC,KAAD,EAAQC,eAAR,KAA4B,MAC1D/B,QAD0D,IAEvD;AACH,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMhB,GAAG,CAACkC,IAAJ,CAChBY,eAAe,GAAG,mBAAH,GAAyB,aADxB,EAEhBD,KAFgB,CAAlB;AAIA9B,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAER;AADC,KAAD,CAAR;AAGAK,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEP,kBADC;AAEPQ,MAAAA,OAAO,EAAEH,GAAG,CAACI,IAAJ,CAASyB;AAFX,KAAD,CAAR;AAKA,WAAO7B,GAAG,CAACI,IAAX;AACD,GAdD,CAcE,OAAOE,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACyB,OAAlB;AACD;AACF,CApBM;AAsBP,OAAO,MAAMC,iBAAiB,GAAG,MAAOjC,QAAD,IAAc;AACnDA,EAAAA,QAAQ,CAAC;AACPG,IAAAA,IAAI,EAAEN;AADC,GAAD,CAAR;AAGD,CAJM;AAMP,OAAO,MAAMqC,oBAAoB,GAAG,CAACb,EAAD,EAAKR,QAAL,KAAmBb,QAAD,IAAc;AAClEA,EAAAA,QAAQ,CAAC;AACPG,IAAAA,IAAI,EAAEL,sBADC;AAEPM,IAAAA,OAAO,EAAE;AAAEiB,MAAAA,EAAF;AAAMR,MAAAA;AAAN;AAFF,GAAD,CAAR;AAIAb,EAAAA,QAAQ,CAACU,iBAAiB,EAAlB,CAAR;AACD,CANM","sourcesContent":["import { setAlert } from './alert-action';\nimport api from '../utils/api';\n\nimport {\n  GET_COOLER,\n  COOLER_ERROR,\n  COOLER_GET_QUANTITY,\n  COOLER_ADD_PRODUCT,\n  COOLER_REMOVE_PRODUCT,\n  COOLER_CHECKOUT,\n  COOLER_REVIEW,\n  COOLER_CHECKOUT_AS_GUEST,\n  COOLER_CHECKOUT_AS_MEMBER,\n  COOLER_PLACE_ORDER,\n  LOAD_CURRENT_ORDER,\n  COOLER_REMOVE_ALL,\n  COOLER_UPDATE_QUANTITY,\n} from './types';\n\nexport const getCooler = () => async (dispatch) => {\n  try {\n    const res = await api.get('/profile/cooler');\n    dispatch({\n      type: GET_COOLER,\n      payload: res.data.profileCooler,\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: COOLER_ERROR,\n    });\n    setAlert('A problem has occurred.');\n  }\n};\n\nexport const coolerGetQuantity = () => (dispatch) => {\n  dispatch({\n    type: COOLER_GET_QUANTITY,\n  });\n};\n\nexport const coolerAddProduct = (beer, quantity, isAuthenticated) => async (\n  dispatch\n) => {\n  // Add a quantity field to item\n  const product = { ...beer, quantity };\n  const productData = {\n    cooler: [product],\n  };\n\n  // If user is not logged in, add item to frontend cooler only\n  if (!isAuthenticated) {\n    dispatch({\n      type: COOLER_ADD_PRODUCT,\n      payload: product,\n    });\n    dispatch(setAlert(`${quantity}x ${beer.name} added to cooler.`));\n    return;\n  }\n\n  // If user is logged in, save item in db\n  try {\n    await api.post('/profile/cooler', productData);\n    dispatch({\n      type: COOLER_ADD_PRODUCT,\n      payload: product,\n    });\n    dispatch(setAlert(`${quantity}x ${beer.name} added to cooler.`));\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: COOLER_ERROR,\n    });\n    setAlert('A problem has occurred.');\n  }\n};\n\nexport const coolerRemoveProduct = (id, name) => async (dispatch) => {\n  try {\n    await api.delete(`/profile/cooler/${id}`);\n    dispatch(setAlert(`${name} has been removed.`));\n    dispatch({\n      type: COOLER_REMOVE_PRODUCT,\n      payload: id,\n    });\n    dispatch(coolerGetQuantity());\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: COOLER_ERROR,\n    });\n    setAlert('A problem has occurred.');\n  }\n};\n\nexport const coolerRemoveAll = (guest) => async (dispatch) => {\n  if (guest) {\n    return dispatch({ type: COOLER_REMOVE_ALL });\n  }\n  try {\n    await api.delete('/profile/cooler');\n    dispatch({\n      type: COOLER_REMOVE_ALL,\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: COOLER_ERROR,\n    });\n    dispatch(setAlert('A problem has occurred.'));\n  }\n};\n\nexport const coolerCheckout = () => (dispatch) => {\n  dispatch({\n    type: COOLER_CHECKOUT,\n  });\n};\n\nexport const coolerReview = () => (dispatch) => {\n  dispatch({\n    type: COOLER_REVIEW,\n  });\n};\n\nexport const coolerCheckoutAsGuest = () => (dispatch) => {\n  dispatch({\n    type: COOLER_CHECKOUT_AS_GUEST,\n  });\n};\n\nexport const coolerCheckoutAsMember = () => (dispatch) => {\n  dispatch({\n    type: COOLER_CHECKOUT_AS_MEMBER,\n  });\n};\n\nexport const coolerPlaceOrder = (order, checkoutAsGuest) => async (\n  dispatch\n) => {\n  try {\n    const res = await api.post(\n      checkoutAsGuest ? '/orders/guest-new' : '/orders/new',\n      order\n    );\n    dispatch({\n      type: COOLER_PLACE_ORDER,\n    });\n    dispatch({\n      type: LOAD_CURRENT_ORDER,\n      payload: res.data.order,\n    });\n\n    return res.data;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const clearCoolerLogout = () => (dispatch) => {\n  dispatch({\n    type: COOLER_REMOVE_ALL,\n  });\n};\n\nexport const coolerUpdateQuantity = (id, quantity) => (dispatch) => {\n  dispatch({\n    type: COOLER_UPDATE_QUANTITY,\n    payload: { id, quantity },\n  });\n  dispatch(coolerGetQuantity());\n};\n"]},"metadata":{},"sourceType":"module"}